{"version":3,"file":"ngsildify.js","sourceRoot":"","sources":["../../lib/ngsildify.ts"],"names":[],"mappings":";;;AAEA,MAAa,SAAS;IAIlB;QAHQ,gBAAW,GAAQ,EAAE,CAAC;QACtB,kBAAa,GAAkB,EAAE,CAAC;IAG1C,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAAU;QAC7B,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,OAAO,GAAQ;YACf,UAAU,EAAE;gBACR,6DAA6D;aAChE;SACJ,CAAC;QACF,IAAI,WAAW,GAAU,EAAE,CAAC;QAC5B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACtB,KAAK,IAAI,CAAC,IAAI,KAAK,EAAE;gBACjB,+BAA+B;gBAC/B,OAAO,GAAG;oBACN,UAAU,EAAE;wBACR,6DAA6D;qBAChE;iBACJ,CAAC;gBACF,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;oBAC9B,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE;wBACtB,mCAAmC;wBACnC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;qBAC1E;oBACD,yCAAyC;oBACzC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;oBACzC,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBACrE;aACJ;SACJ;aAAM;YACH,IAAI,KAAK,CAAC,UAAU,CAAC,EAAE;gBACnB,mCAAmC;gBACnC,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;aACvE;YACD,yCAAyC;YACzC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;YACzC,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACpD,IAAI,cAAc,IAAI,IAAI;gBACtB,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SACxC;QACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;QACtC,OAAO,IAAI,CAAC,WAAW,CAAA;IAC3B,CAAC;IAES,KAAK,CAAC,UAAU,CAAC,KAAU;QACjC,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE;YAC5D,MAAM,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YACjD,IAAI,MAAM,GAAQ;gBACd,UAAU,EAAE,IAAI,CAAC,aAAa;aACjC,CAAC;YACF,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC9C,IAAI,GAAG,IAAI,UAAU,EAAE;oBACnB,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,OAAO,IAAI,GAAG,IAAI,MAAM,EAAE;wBACzD,IAAI,mBAAmB,GAAG,EAAE,CAAC;wBAC7B,KAAK,IAAI,CAAC,IAAI,KAAK;4BACf,mBAAmB,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACrF,MAAM,CAAC,GAAG,CAAC,GAAG,mBAAmB,CAAC;qBACrC;yBAAM,IAAI,GAAG,KAAK,KAAK;wBACpB,GAAG,KAAK,IAAI;wBACZ,GAAG,KAAK,OAAO;wBACf,GAAG,KAAK,MAAM,EAAE;wBAChB,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;qBACvB;yBAAM;wBACH,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;qBAC3D;iBACJ;aACJ;YACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;gBAChB,MAAM,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC,CAAC,+BAA+B;YAC/D,OAAO,MAAM,CAAC;SACjB;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAES,KAAK,CAAC,WAAW,CAAC,KAAU,EAAE,MAAc,EAAE,QAAgB,EAAE,KAAY;QAClF,IAAI,CAAC,OAAO,KAAK,KAAK,QAAQ;YAC1B,QAAQ,KAAK,OAAO;YACpB,QAAQ,KAAK,MAAM,CAAC,EAAE;YACtB,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;YACnC,MAAM,UAAU,GAAY,OAAO,WAAW,CAAC,UAAU,KAAK,UAAU,CAAC;YAEzE,uFAAuF;YACvF,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;gBACpB,CAAC,WAAW,IAAI,UAAU,IAAI,CAC1B,WAAW,CAAC,UAAU,CAAC,8CAA8C,CAAC;oBACtE,WAAW,CAAC,UAAU,CAAC,mCAAmC,CAAC;oBAC3D,WAAW,CAAC,UAAU,CAAC,iDAAiD,CAAC;oBACzE,WAAW,CAAC,UAAU,CAAC,yCAAyC,CAAC,CAAC,CAAC,EAAE;gBACzE,MAAM,YAAY,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACrC,MAAM,MAAM,GAAQ;oBAChB,OAAO,EAAE,UAAU;oBACnB,KAAK,EAAE;wBACH,QAAQ,EAAE,YAAY;wBACtB,OAAO,EAAE,WAAW;qBACvB;iBACJ,CAAC;gBACF,IAAG,KAAK,CAAC,WAAW,CAAC,EAAE;oBACnB,MAAM,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,CAAA;iBAC3C;gBACD,OAAO,MAAM,CAAC;aACjB;iBAAM;gBACH,YAAY;gBACZ,MAAM,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;gBAC/D,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;oBAAE,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,oCAAoC;gBAC1F,iEAAiE;gBACjE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBAC/C,IAAI,SAAS,IAAI,SAAS,CAAC,OAAO,CAAC;oBAC/B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACrC,OAAO;oBACH,OAAO,EAAE,cAAc;oBACvB,MAAM,EAAE,EAAE;iBACb,CAAC;aACL;SACJ;aAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAC9D,OAAO;gBACH,OAAO,EAAE,cAAc;gBACvB,MAAM,EAAE,KAAK;aAChB,CAAC;SACL;aAAM,IAAI,OAAO,KAAK,KAAK,QAAQ;YAChC,QAAQ,KAAK,OAAO;YACpB,QAAQ,KAAK,MAAM,EAAE;YACrB,4DAA4D;YAC5D,OAAO;gBACH,OAAO,EAAE,UAAU;gBACnB,KAAK,EAAE,KAAK;aACf,CAAC;SACL;aAAM;YACH,OAAO,KAAK,CAAC;SAChB;IACL,CAAC;IAES,cAAc,CAAC,KAAU,EAAE,MAAc,EAAE,QAAgB,EAAE,KAAa;QAChF,IAAI,OAAO,KAAK,KAAK,QAAQ;YAAE,OAAO,KAAK,CAAC;QAC5C,yBAAyB;aACpB,IAAI,KAAK,CAAC,KAAK,CAAC;YAAE,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC;aACtC,IAAI,KAAK,CAAC,IAAI,CAAC;YAAE,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC;;YACpC,OAAO,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC,WAAW,EAAE,GAAG,GAAG,GAAG,KAAK,CAAC;IACpE,CAAC;CACJ;AA9ID,8BA8IC","sourcesContent":["import {JsonLdContext} from \"jsonld-context-parser\";\r\n\r\nexport class Ngsildify {\r\n    private resultArray: any = [];\r\n    private jsonLdContext: JsonLdContext = \"\";\r\n\r\n    public constructor() {\r\n    }\r\n\r\n    public async transform(input: any): Promise<any[]> {\r\n        this.resultArray = [];\r\n        let context: any = {\r\n            \"@context\": [\r\n                \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\",\r\n            ],\r\n        };\r\n        let rootObjects: any[] = [];\r\n        if (Array.isArray(input)) {\r\n            for (let i in input) {\r\n                // reset context on new object!\r\n                context = {\r\n                    \"@context\": [\r\n                        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld\",\r\n                    ],\r\n                };\r\n                if (typeof input[i] === \"object\") {\r\n                    if (input[i][\"@context\"]) {\r\n                        // Add context from input to result\r\n                        context[\"@context\"] = context[\"@context\"].concat(input[i][\"@context\"]);\r\n                    }\r\n                    // Set context to be used across entities\r\n                    this.jsonLdContext = context[\"@context\"];\r\n                    rootObjects = rootObjects.concat(await this.handleRoot(input[i]));\r\n                }\r\n            }\r\n        } else {\r\n            if (input[\"@context\"]) {\r\n                // Add context from input to result\r\n                context[\"@context\"] = context[\"@context\"].concat(input[\"@context\"]);\r\n            }\r\n            // Set context to be used across entities\r\n            this.jsonLdContext = context[\"@context\"];\r\n            const tempHandleRoot = await this.handleRoot(input);\r\n            if (tempHandleRoot != null)\r\n                rootObjects.push(tempHandleRoot);\r\n        }\r\n        this.resultArray.push(...rootObjects);\r\n        return this.resultArray\r\n    }\r\n\r\n    protected async handleRoot(input: any): Promise<any> {\r\n        if (typeof input === \"object\" && (input[\"@id\"] || input[\"id\"])) {\r\n            const id = this.getIdFromValue(input, \"\", \"\", 1);\r\n            let result: any = {\r\n                \"@context\": this.jsonLdContext,\r\n            };\r\n            for (const [key, value] of Object.entries(input)) {\r\n                if (key != \"@context\") {\r\n                    if (Array.isArray(value) && key != \"@type\" && key != \"type\") {\r\n                        let expandedValueResult = [];\r\n                        for (let v in value)\r\n                            expandedValueResult.push(await this.handleValue(value[v], id, key, parseInt(v)));\r\n                        result[key] = expandedValueResult;\r\n                    } else if (key === \"@id\" ||\r\n                        key === \"id\" ||\r\n                        key === \"@type\" ||\r\n                        key === \"type\") {\r\n                        result[key] = value;\r\n                    } else {\r\n                        result[key] = await this.handleValue(value, id, key, 1);\r\n                    }\r\n                }\r\n            }\r\n            if (!result[\"@type\"])\r\n                result[\"@type\"] = \"Entity\"; // fallback when no @type found\r\n            return result;\r\n        }\r\n        return input;\r\n    }\r\n\r\n    protected async handleValue(value: any, prevId: string, relation: string, index:number): Promise<any> {\r\n        if ((typeof value === \"object\" &&\r\n            relation !== \"@type\" &&\r\n            relation !== \"type\")) {\r\n            const typeOfValue = value[\"@type\"];\r\n            const startsWith: boolean = typeof typeOfValue.startsWith === 'function';\r\n\r\n            // if the value is actually typed as Literal or XMLSchema type, don't handle it as root\r\n            if ((value[\"@language\"]) || \r\n                (typeOfValue && startsWith && (\r\n                    typeOfValue.startsWith('http://www.w3.org/2000/01/rdf-schema#Literal') || \r\n                    typeOfValue.startsWith('http://www.w3.org/2001/XMLSchema#') || \r\n                    typeOfValue.startsWith('http://www.opengis.net/ont/geosparql#wktLiteral') || \r\n                    typeOfValue.startsWith('http://w3id.org/lindt/custom_datatypes#')))) {\r\n                const valueOfValue = value[\"@value\"];\r\n                const result: any = {\r\n                    \"@type\": \"Property\",\r\n                    value: {\r\n                        \"@value\": valueOfValue,\r\n                        \"@type\": typeOfValue\r\n                    },\r\n                };\r\n                if(value[\"@language\"]) {\r\n                    result[\"@language\"] = value[\"@language\"]\r\n                }\r\n                return result;\r\n            } else {\r\n                // go deeper\r\n                const id = this.getIdFromValue(value, prevId, relation, index);\r\n                if (!value[\"id\"] && !value[\"@id\"]) value[\"@id\"] = id; // make sure value has an identifier\r\n                // create new result from this object and return the relationship\r\n                const newResult = await this.handleRoot(value);\r\n                if (newResult && newResult[\"@type\"])\r\n                    this.resultArray.push(newResult);\r\n                return {\r\n                    \"@type\": \"Relationship\",\r\n                    object: id,\r\n                };\r\n            }\r\n        } else if (typeof value === \"string\" && value.startsWith('http')) {\r\n            return {\r\n                \"@type\": \"Relationship\",\r\n                object: value,\r\n            };\r\n        } else if (typeof value === \"string\" &&\r\n            relation !== \"@type\" &&\r\n            relation !== \"type\") {\r\n            // create new property from this string and return the value\r\n            return {\r\n                \"@type\": \"Property\",\r\n                value: value,\r\n            };\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    protected getIdFromValue(value: any, prevId: string, relation: string, index: number) {\r\n        if (typeof value === \"string\") return value;\r\n        // value is only a string\r\n        else if (value[\"@id\"]) return value[\"@id\"];\r\n        else if (value[\"id\"]) return value[\"id\"];\r\n        else return prevId + \"/\" + relation.toLowerCase() + \"/\" + index;\r\n    }\r\n}\r\n\r\n"]}